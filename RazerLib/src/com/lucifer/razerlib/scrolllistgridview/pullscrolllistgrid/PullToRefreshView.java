package com.lucifer.razerlib.scrolllistgridview.pullscrolllistgrid;import com.lucifer.razerlib.R;import android.annotation.SuppressLint;import android.content.Context;import android.os.Handler;import android.util.AttributeSet;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.view.View.MeasureSpec;import android.view.animation.AnimationUtils;import android.view.animation.LinearInterpolator;import android.view.animation.RotateAnimation;import android.widget.AdapterView;import android.widget.GridView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.ScrollView;import android.widget.TextView;import android.widget.LinearLayout.LayoutParams;@SuppressLint("ClickableViewAccessibility")public class PullToRefreshView extends LinearLayout{	// private static final String TAG = "PullToRefreshView";	// pull state	private static final int PULL_UP_STATE = 0;	private static final int PULL_DOWN_STATE = 1;	// refresh states	private static final int PULL_TO_REFRESH = 2;	private static final int RELEASE_TO_REFRESH = 3;	private static final int REFRESHING = 4;		/**	 * last y	 */	private int mLastMotionY;	/**	 * lock	 */	// private boolean mLock;	/**	 * header view	 */	private View mHeaderView;	/**	 * footer view	 */	private View mFooterView;	/**	 * list or grid	 */	private AdapterView<?> mAdapterView;	/**	 * scrollview	 */	private ScrollView mScrollView;	/**	 * header view height	 */	private int mHeaderViewHeight;	/**	 * footer view height	 */	private int mFooterViewHeight;	private TextView mHeaderTextView;	/**	 * footer tip text	 */	private TextView mFooterTextView;	/**	 * header refresh time	 */	private TextView mHeaderUpdateTextView;	/**	 * footer refresh time	 */	// private TextView mFooterUpdateTextView;	/**	 * header progress bar	 */	private ProgressBar mHeaderProgressBar;	/**	 * footer progress bar	 */	private ProgressBar mFooterProgressBar;	/**	 * layout inflater	 */	private LayoutInflater mInflater;	/**	 * header view current state	 */	private int mHeaderState;	/**	 * footer view current state	 */	private int mFooterState;	/**	 * pull state,pull up or pull down;PULL_UP_STATE or PULL_DOWN_STATE	 */	private int mPullState;	/**	 * 变为向下的箭�?改变箭头方向	 */	private RotateAnimation mFlipAnimation;	/**	 * 变为逆向的箭�?旋转	 */	private RotateAnimation mReverseFlipAnimation;	private RotateAnimation progressbar_rotate;	/**	 * footer refresh listener	 */	private OnFooterRefreshListener mOnFooterRefreshListener;	/**	 * footer refresh listener	 */	private OnHeaderRefreshListener mOnHeaderRefreshListener;	/**	 * last update time	 */	// private String mLastUpdateTime;	public PullToRefreshView(Context context, AttributeSet attrs)	{		super(context, attrs);		init();	}	public PullToRefreshView(Context context)	{		super(context);		init();	}	/**	 * init	 * 	 * @param context	 */	private void init()	{		// �?��设置成vertical		setOrientation(LinearLayout.VERTICAL);		// Load all of the animations we need in code rather than through XML		mFlipAnimation = new RotateAnimation(0, -180,				RotateAnimation.RELATIVE_TO_SELF, 0.5f,				RotateAnimation.RELATIVE_TO_SELF, 0.5f);		mFlipAnimation.setInterpolator(new LinearInterpolator());		mFlipAnimation.setDuration(250);		mFlipAnimation.setFillAfter(true);		mReverseFlipAnimation = new RotateAnimation(-180, 0,				RotateAnimation.RELATIVE_TO_SELF, 0.5f,				RotateAnimation.RELATIVE_TO_SELF, 0.5f);		mReverseFlipAnimation.setInterpolator(new LinearInterpolator());		mReverseFlipAnimation.setDuration(250);		mReverseFlipAnimation.setFillAfter(true);		progressbar_rotate = (RotateAnimation) AnimationUtils.loadAnimation(				getContext(), R.anim.rotate_imageview);		mInflater = LayoutInflater.from(getContext());		// header view 在此添加,保证是第�?��添加到linearlayout的最上端		addHeaderView();	}			private void addHeaderView()	{		// header view		mHeaderView = mInflater.inflate(R.layout.refresh_header, this, false);		mHeaderTextView = (TextView) mHeaderView				.findViewById(R.id.pull_to_refresh_text);		mHeaderUpdateTextView = (TextView) mHeaderView				.findViewById(R.id.pull_to_refresh_updated_at);		mHeaderProgressBar = (ProgressBar) mHeaderView				.findViewById(R.id.pull_to_refresh_progress);		// header layout		measureView(mHeaderView);		mHeaderViewHeight = mHeaderView.getMeasuredHeight();		LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT,				mHeaderViewHeight);		// 设置topMargin的�?为负的header View高度,即将其隐藏在�?���?		params.topMargin = -(mHeaderViewHeight);		// mHeaderView.setLayoutParams(params1);		addView(mHeaderView, params);	}	private void addFooterView()	{		// footer view		mFooterView = mInflater.inflate(R.layout.refresh_footer, this, false);		mFooterTextView = (TextView) mFooterView				.findViewById(R.id.pull_to_load_text);		mFooterProgressBar = (ProgressBar) mFooterView				.findViewById(R.id.pull_to_load_progress);		// footer layout		measureView(mFooterView);		mFooterViewHeight = mFooterView.getMeasuredHeight();		LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT,				mFooterViewHeight);		addView(mFooterView, params);	}	@Override	protected void onFinishInflate()	{		super.onFinishInflate();		// footer view 在此添加保证添加到linearlayout中的�?��		addFooterView();		initContentAdapterView();	}	/**	 * init AdapterView like ListView,GridView and so on;or init ScrollView	 * 	 */	private void initContentAdapterView()	{		int count = getChildCount();		if (count < 3)		{			throw new IllegalArgumentException(					"This layout must contain 3 child views,and AdapterView or ScrollView must in the second position!");		}		View view = null;		for (int i = 0; i < count - 1; ++i)		{			view = getChildAt(i);			if (view instanceof AdapterView<?>)			{				mAdapterView = (AdapterView<?>) view;			}			if (view instanceof ScrollView)			{				// finish later				mScrollView = (ScrollView) view;			}		}		if (mAdapterView == null && mScrollView == null)		{			throw new IllegalArgumentException(					"must contain a AdapterView or ScrollView in this layout!");		}	}	private void measureView(View child)	{		ViewGroup.LayoutParams p = child.getLayoutParams();		if (p == null)		{			p = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,					ViewGroup.LayoutParams.WRAP_CONTENT);		}		int childWidthSpec = ViewGroup.getChildMeasureSpec(0, 0 + 0, p.width);		int lpHeight = p.height;		int childHeightSpec;		if (lpHeight > 0)		{			childHeightSpec = MeasureSpec.makeMeasureSpec(lpHeight,					MeasureSpec.EXACTLY);		} else		{			childHeightSpec = MeasureSpec.makeMeasureSpec(0,					MeasureSpec.UNSPECIFIED);		}		child.measure(childWidthSpec, childHeightSpec);	}				@Override	public boolean onInterceptTouchEvent(MotionEvent e)	{		int y = (int) e.getRawY();		switch (e.getAction())		{		case MotionEvent.ACTION_DOWN:			// 首先拦截down事件,记录y坐标			mLastMotionY = y;			break;		case MotionEvent.ACTION_MOVE:			// deltaY > 0 是向下运�?< 0是向上运�?			int deltaY = y - mLastMotionY;			if (isRefreshViewScroll(deltaY))			{				return true;			}			break;		case MotionEvent.ACTION_UP:		case MotionEvent.ACTION_CANCEL:			break;		}		return false;	}	/*	 * 如果在onInterceptTouchEvent()方法中没有拦�?即onInterceptTouchEvent()方法�?return	 * false)则由PullToRefreshView 的子View来处�?否则由下面的方法来处�?即由PullToRefreshView自己来处�?	 */	@Override	public boolean onTouchEvent(MotionEvent event)	{		int y = (int) event.getRawY();		switch (event.getAction())		{		case MotionEvent.ACTION_DOWN:			// onInterceptTouchEvent已经记录			// mLastMotionY = y;			break;		case MotionEvent.ACTION_MOVE:			int deltaY = y - mLastMotionY;			if (mPullState == PULL_DOWN_STATE)			{// 执行下拉				headerPrepareToRefresh(deltaY);				// setHeaderPadding(-mHeaderViewHeight);			} else if (mPullState == PULL_UP_STATE)			{// 执行上拉				footerPrepareToRefresh(deltaY);			}			mLastMotionY = y;			break;		case MotionEvent.ACTION_UP:		case MotionEvent.ACTION_CANCEL:			int topMargin = getHeaderTopMargin();			if (mPullState == PULL_DOWN_STATE)			{				if (topMargin >= 0)				{					// �?��刷新					headerRefreshing();				} else				{					// 还没有执行刷新，重新隐藏					setHeaderTopMargin(-mHeaderViewHeight);				}			} else if (mPullState == PULL_UP_STATE)			{				if (Math.abs(topMargin) >= mHeaderViewHeight						+ mFooterViewHeight)				{					// �?��执行footer 刷新					footerRefreshing();				} else				{					// 还没有执行刷新，重新隐藏					setHeaderTopMargin(-mHeaderViewHeight);				}			}			break;		}		return super.onTouchEvent(event);	}		/**	 * 是否应该到了父View,即PullToRefreshView滑动	 * 	 * @param deltaY	 *            , deltaY > 0 是向下运�?< 0是向上运�?	 * @return	 */	private boolean isRefreshViewScroll(int deltaY)	{		if (mHeaderState == REFRESHING || mFooterState == REFRESHING)		{			return false;		}		// 对于ListView和GridView		if (mAdapterView != null)		{			// 子view(ListView or GridView)滑动到最顶端			if (deltaY > 0)			{				View child = mAdapterView.getChildAt(0);				if (child == null)				{					// 如果mAdapterView中没有数�?不拦�?					return false;				}								if(mAdapterView instanceof ListView)				{					if (mAdapterView.getFirstVisiblePosition() == 0							&& child.getTop() == 0)					{						mPullState = PULL_DOWN_STATE;						return true;					}				}				else if (mAdapterView instanceof GridView) 				{					if (mAdapterView.getFirstVisiblePosition() == 0							&& child.getTop()>=0)					{						mPullState = PULL_DOWN_STATE;						return true;					}				}								int top = child.getTop();				int padding = mAdapterView.getPaddingTop();				if (mAdapterView.getFirstVisiblePosition() == 0						&& Math.abs(top - padding) <= 8)				{// 这里之前�?可以判断,但现在不�?还没找到原因					mPullState = PULL_DOWN_STATE;					return true;				}							} else if (deltaY < 0)			{				View lastChild = mAdapterView.getChildAt(mAdapterView						.getChildCount() - 1);				if (lastChild == null)				{					// 如果mAdapterView中没有数�?不拦�?					return false;				}				// �?���?��子view的Bottom小于父View的高度说明mAdapterView的数据没有填满父view,				// 等于父View的高度说明mAdapterView已经滑动到最�?				if (lastChild.getBottom() <= getHeight()						&& mAdapterView.getLastVisiblePosition() == mAdapterView								.getCount() - 1)				{					mPullState = PULL_UP_STATE;					return true;				}			}		}		// 对于ScrollView		if (mScrollView != null)		{			// 子scroll view滑动到最顶端			View child = mScrollView.getChildAt(0);			if (deltaY > 0 && mScrollView.getScrollY() == 0)			{				mPullState = PULL_DOWN_STATE;				return true;			} else if (deltaY < 0					&& child.getMeasuredHeight() <= getHeight()							+ mScrollView.getScrollY())			{				mPullState = PULL_UP_STATE;				return true;			}		}		return false;	}			/**	 * header 准备刷新,手指移动过程,还没有释�?	 * 	 * @param deltaY	 *            ,手指滑动的距�?	 */	private void headerPrepareToRefresh(int deltaY)	{		int newTopMargin = changingHeaderViewTopMargin(deltaY);		// 当header view的topMargin>=0时，说明已经完全显示出来，修改header view 的提示状�?		if (newTopMargin >= 0 && mHeaderState != RELEASE_TO_REFRESH)		{			mHeaderTextView.setText(R.string.pull_to_refresh_release_label);			mHeaderProgressBar.setVisibility(View.GONE);			mHeaderUpdateTextView.setVisibility(View.VISIBLE);			mHeaderState = RELEASE_TO_REFRESH;		} 		else if (newTopMargin < 0 && newTopMargin > -mHeaderViewHeight)		{// 拖动时没有释�?			mHeaderTextView.setText(R.string.pull_to_refresh_pull_label);			mHeaderProgressBar.setVisibility(View.GONE);			mHeaderState = PULL_TO_REFRESH;		}	}	/**	 * footer 准备刷新,手指移动过程,还没有释�?移动footer view高度同样和移动header view	 * 高度是一样，都是通过修改header view的topmargin的�?来达�?	 * 	 * @param deltaY	 *            ,手指滑动的距�?	 */	private void footerPrepareToRefresh(int deltaY)	{		int newTopMargin = changingHeaderViewTopMargin(deltaY);		if (Math.abs(newTopMargin) >= (mHeaderViewHeight + mFooterViewHeight)				&& mFooterState != RELEASE_TO_REFRESH)		{			mFooterTextView					.setText(R.string.pull_to_refresh_footer_release_label);			mFooterProgressBar.setVisibility(View.GONE);			mFooterState = RELEASE_TO_REFRESH;		} else if (Math.abs(newTopMargin) < (mHeaderViewHeight + mFooterViewHeight))		{			mFooterTextView.setText(R.string.pull_to_refresh_footer_pull_label);			mFooterProgressBar.setVisibility(View.GONE);			mFooterState = PULL_TO_REFRESH;		}	}				/**	 * 修改Header view top margin的�?	 * 	 * @param deltaY	 */	private int changingHeaderViewTopMargin(int deltaY)	{		LayoutParams params = (LayoutParams) mHeaderView.getLayoutParams();		float newTopMargin = params.topMargin + deltaY * 0.3f;		// 这里对上拉做�?��限制,因为当前上拉后然后不释放手指直接下拉,会把下拉刷新给触发了,感谢网友yufengzungzhe的指�?		// 表示如果是在上拉后一段距�?然后直接下拉		if (deltaY > 0 && mPullState == PULL_UP_STATE				&& Math.abs(params.topMargin) <= mHeaderViewHeight)		{			return params.topMargin;		}		// 同样�?对下拉做�?��限制,避免出现跟上拉操作时�?��的bug		if (deltaY < 0 && mPullState == PULL_DOWN_STATE				&& Math.abs(params.topMargin) >= mHeaderViewHeight)		{			return params.topMargin;		}		params.topMargin = (int) newTopMargin;		mHeaderView.setLayoutParams(params);		invalidate();		return params.topMargin;	}	/**	 * header refreshing	 * 	 */	private void headerRefreshing()	{		mHeaderState = REFRESHING;		setHeaderTopMargin(0);		mHeaderProgressBar.setVisibility(View.VISIBLE);		mHeaderProgressBar.clearAnimation();		mHeaderProgressBar.startAnimation(progressbar_rotate);		mHeaderTextView.setText(R.string.pull_to_refresh_refreshing_label);		if (mOnHeaderRefreshListener != null)		{			mOnHeaderRefreshListener.onHeaderRefresh(this);		}	}	/**	 * footer refreshing	 * 	 */	private void footerRefreshing()	{		mFooterState = REFRESHING;		int top = mHeaderViewHeight + mFooterViewHeight;		setHeaderTopMargin(-top);		mFooterProgressBar.setVisibility(View.VISIBLE);		mFooterProgressBar.clearAnimation();		mFooterProgressBar.startAnimation(progressbar_rotate);		mFooterTextView				.setText(R.string.pull_to_refresh_footer_refreshing_label);		if (mOnFooterRefreshListener != null)		{			mOnFooterRefreshListener.onFooterRefresh(this);		}	}				/**	 * 设置header view 的topMargin的�?	 * 	 * @param topMargin	 *            ，为0时，说明header view 刚好完全显示出来�?�?mHeaderViewHeight时，说明完全隐藏�?	 */	private void setHeaderTopMargin(int topMargin)	{		LayoutParams params = (LayoutParams) mHeaderView.getLayoutParams();		params.topMargin = topMargin;		mHeaderView.setLayoutParams(params);		invalidate();	}	/**	 * header view 完成更新后恢复初始状�?	 * 	 */	public void onHeaderRefreshComplete()	{		new Handler().postDelayed(new Runnable()		{			@Override			public void run()			{				// TODO Auto-generated method stub				setHeaderTopMargin(-mHeaderViewHeight);				mHeaderTextView.setText(R.string.pull_to_refresh_pull_label);				mHeaderProgressBar.setVisibility(View.GONE);				mHeaderState = PULL_TO_REFRESH;			}		}, 2000);	}	/**	 * Resets the list to a normal state after a refresh.	 * 	 * @param lastUpdated	 *            Last updated at.	 */	public void onHeaderRefreshComplete(CharSequence lastUpdated)	{		setLastUpdated(lastUpdated);		onHeaderRefreshComplete();	}	/**	 * footer view 完成更新后恢复初始状�?	 */	public void onFooterRefreshComplete()	{		new Handler().postDelayed(new Runnable()		{			@Override			public void run()			{				setHeaderTopMargin(-mHeaderViewHeight);				mFooterTextView						.setText(R.string.pull_to_refresh_footer_pull_label);				mFooterProgressBar.setVisibility(View.GONE);				mFooterState = PULL_TO_REFRESH;			}		}, 2000);	}				/**	 * Set a text to represent when the list was last updated.	 * 	 * @param lastUpdated	 *            Last updated at.	 */	public void setLastUpdated(CharSequence lastUpdated)	{		if (lastUpdated != null)		{			mHeaderUpdateTextView.setVisibility(View.VISIBLE);			mHeaderUpdateTextView.setText(lastUpdated);		} else		{			mHeaderUpdateTextView.setVisibility(View.GONE);		}	}	/**	 * 获取当前header view 的topMargin	 * 	 */	private int getHeaderTopMargin()	{		LayoutParams params = (LayoutParams) mHeaderView.getLayoutParams();		return params.topMargin;	}				/**	 * set headerRefreshListener	 * 	 * @param headerRefreshListener	 */	public void setOnHeaderRefreshListener(			OnHeaderRefreshListener headerRefreshListener)	{		mOnHeaderRefreshListener = headerRefreshListener;	}	public void setOnFooterRefreshListener(			OnFooterRefreshListener footerRefreshListener)	{		mOnFooterRefreshListener = footerRefreshListener;	}	/**	 * Interface definition for a callback to be invoked when list/grid footer	 * view should be refreshed.	 */	public interface OnFooterRefreshListener	{		public void onFooterRefresh(PullToRefreshView view);	}	/**	 * Interface definition for a callback to be invoked when list/grid header	 * view should be refreshed.	 */	public interface OnHeaderRefreshListener	{		public void onHeaderRefresh(PullToRefreshView view);	}}